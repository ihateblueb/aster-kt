package site.remlit.blueb.aster.common.generator

import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.asTypeName
import site.remlit.blueb.aster.common.model.DriveFile
import site.remlit.blueb.aster.common.model.Note
import site.remlit.blueb.aster.common.model.Policy
import site.remlit.blueb.aster.common.model.User
import java.time.LocalDateTime
import kotlin.reflect.KClass
import kotlin.reflect.full.declaredMemberProperties
import kotlin.reflect.full.withNullability

class PartialGenerator {
	private val generated: MutableList<TypeSpec> = mutableListOf()

	private val classesToPartialize: List<KClass<*>> = listOf(
		DriveFile::class,
		Note::class,
		Policy::class,
		User::class
	)

	fun generate() {
		for (klass in classesToPartialize) {
			val partial = TypeSpec.classBuilder("Partial${klass.simpleName}")
				.addModifiers(KModifier.DATA)
				.primaryConstructor(
					FunSpec.constructorBuilder().apply {
						for (prop in klass.declaredMemberProperties) {
							val type = prop.returnType.withNullability(true).asTypeName()
							this.addParameter(
								prop.name, type
							)
						}
					}.build()
				)
				.apply {
					for (prop in klass.declaredMemberProperties) {
						val type = prop.returnType.withNullability(true).asTypeName()
						this.addProperty(
							PropertySpec.builder(prop.name, type)
								.initializer(prop.name).build()
						)
					}
				}
				.addKdoc(
					"Partial ${klass.simpleName}. Not every property needs to be specified."
				)

			generated.add(partial.build())
		}

		val partialFile = FileSpec.builder("site.remlit.blueb.aster.common.model.generated", "Partials.kt")
			.addFileComment("Generated by common-generators.\nThis file should not be edited.\nGenerated on ${LocalDateTime.now()}")
			.addTypes(generated)
			.build()

		SourceWriter.write(SourceWriter.commonMainSource, "Partials", partialFile.toString())
	}
}